#!/bin/bash
# Base install.sh by Gege Desembri <https://github.com/GegeDesembri/openwrt-tools>
# Revamped installation and added various supported devices architectures (Arm, arm64, x86_generic, x86_64) by Helmi Amirudin <https://helmiau.com>

cfgh="cloudflare/cloudflared"
bincf="/usr/bin/cloudflared"
initcf="/etc/init.d/cloudflared"
scnm="$(basename "$0")"

# Checking if packages installed
chkIPK () {
	unset lstPkg
	lstPkg=$( opkg list-installed | grep -c "^bash -\|^jq -\|^wget -\|^wget-ssl -\|curl -\|curl-ssl -" )
	if [[ $lstPkg -lt 4 ]]; then
		echo -e "All/some required packages is not installed correctly or something wrong...."
		echo -e "Updating package repositories..."
		opkg update
	fi
}

# Install package if not installed, leave install if already installed
insIPK () {
	if [[ $( opkg list-installed | grep -c "^$1 -" ) == "0" ]]; then opkg install "$1"; fi
}

# Download and install Cloudflared binaries
insBIN () {
	# Github get latest version
	cfVer=$(curl -s "https://api.github.com/repos/${cfgh}/releases/latest" | jq -r .tag_name)

	# Get device architecture
	odf="/etc/opkg/distfeed.conf"
	if [[ -e /etc/config/openclash ]] && grep -q "openclash.config.core_version"; then
		archie="$( uci -q get openclash.config.core_version )"
	elif [[ -e $odf ]] && grep -q "arm_"; then
		archie="linux-arm"
	elif [[ -e $odf ]] && grep -q "aarch64_"; then
		archie="linux-arm64"
	#elif [[ -e $odf ]] && grep -q "xxxx"; then
	#	archie="linux-armhf "
	elif [[ -e $odf ]] && grep -q "x86_64"; then
		archie="linux-amd64"
	elif [[ -e $odf ]] && grep -q "i386_"; then
		archie="linux-386"
	else
		archie="unsupported"
		echo -e "Your device is unsupported!. Exiting..."
		exit 1
	fi

	# Install Cloudflared
	echo -e "Architecture detected: ${archie}"
	wget -qO $bincf "https://github.com/${cfgh}/releases/download/${cfVer}/cloudflared-${archie}"
	chmod +x $bincf

	# Install init.d
	wget -qO $initcf "https://raw.githubusercontent.com/GegeDesembri/openwrt-tools/master/cloudflared/cloudflared"
	chmod +x $initcf
}

# Token changer
tknDT () {
	# Get old data 
	if [[ -e ${initcf} ]]; then
		unset tkn
		tkn=$(grep cfd_token ${initcf} | sed 's/.*cfd_token=//')
		
		# Edit data
		echo -e "Editing data..."
		echo -e "üí¨ Enter New Cloudflared Token: (leave empty if no change)"
		echo -n "==>> "
		read -r newtkn
		if [[ -n $newtkn ]]; then
			sed -i "s#$tkn#$newtkn#g" $initcf
			# Success notif
			echo -e "‚úîÔ∏è Cloudflared data updated successfully."
		else
			# No change notif
			echo -e "‚úîÔ∏è Cloudflared data is not updated."
		fi
	else
		echo -e "File ${initcf} not available."
	fi
}

# Enable/disable Cloudflared autostart
autoST () {
	if [[ $(grep cfd_token ${initcf} | awk '{print length}') -gt 25 ]]; then
		# Enable Cloudflared
		$initcf enable
		$initcf start
		sed -i "s#$tkn#$newtkn#g" $initcf
		# Success notif
		echo -e "‚úîÔ∏è Cloudflared token set. Autostart activated."
	else
		# Enable Cloudflared
		$initcf disabled
		$initcf stop
		# No change notif
		echo -e "‚úîÔ∏è Cloudflared data is not set. Autostart disabled."
	fi
}

# Uninstall Cloudflared
uninsBIN () {
	$initcf disabled
	$initcf stop
	[ -f $initcf ] && rm -f $initcf
	[ -f $bincf ] && rm -f $bincf
	echo -e "‚úîÔ∏è Cloudflared uninstalled successfully!."
}

# Optional commands
if [[ $1 == "i" ]]; then
	# Installation cmds
	chkIPK
	insIPK bash
	insIPK jq
	if [[ $( opkg list | grep -c "wget-ssl -" ) -gt "1" ]]; then
		insIPK wget-ssl
	else
		insIPK wget
	fi
	insIPK curl
	chkIPK

	# Install binaries
	insBIN

	# Change token
	tknDT

	# Enable Cloudflared autostart
	autoCF

elif [[ $1 == "e" ]]; then
	tknDT
	autoCF
elif [[ $1 == "s" ]]; then
	# Enable/disable auto start
	autoCF
elif [[ $1 == "u" ]]; then
	# Disable runs
	autoCF
	# Install binaries
	insBIN
	# Enable runs
	autoCF
elif [[ $1 == "r" ]]; then
	# Uninstall full
	uninsBIN
else
	echo -e "Cloudflared Script Usage:"
	echo -e "$scnm i : Install Cloudflared"
	echo -e "$scnm e : Edit Cloudflared token"
	echo -e "$scnm s : Activate/Disable autostart"
	echo -e "$scnm u : Update Cloudflared binary"
	echo -e "$scnm r : Uninstall Cloudflared"
fi
