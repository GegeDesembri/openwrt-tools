#!/bin/bash
# Base install.sh by Gege Desembri <https://github.com/GegeDesembri/openwrt-tools>
# Revamped installation and added various supported devices architectures (Arm, arm64, x86_generic, x86_64) by Helmi Amirudin <https://helmiau.com>

github_reponame="cloudflare/cloudflared"
path_binary="/usr/bin/cloudflared"
file_initd="/etc/init.d/cloudflared"
script_name="$(basename "$0")"

# Checking if packages installed
function check_prerequisite() {
	unset list_pkg
	list_pkg=$(opkg list-installed | grep -c "^bash \-\|^screen \-\|^jq \-\|^wget \-\|^wget\-ssl \-\|^curl \-\|^curl\-ssl \-")
	if [[ ${list_pkg} -lt 3 ]]; then
		echo -e "All/some required packages is not installed correctly or something wrong...."
		echo -e "Updating package repositories..."
		opkg update
	fi
}

# Install package if not installed, leave install if already installed
function install_prerequisite() {
	if [[ $(opkg list-installed | grep -c "^$1 -") == "0" ]]; then opkg install "$1"; fi
}

function compare_versions() {
	[[ "$(echo "$1"$'\n'"$v2" | sort -V | head -n1)" == "$v1" ]]
}

# Download and install Cloudflared binaries
function install_binary() {
	# Github get latest version
	latest_binary=$(curl -s "https://api.github.com/repos/${github_reponame}/releases/latest" | jq -r .tag_name)

	# compare version before installing
	if [[ -e $path_binary ]]; then
		current_binary=$($path_binary --version | sed -n 's/.*version \([0-9.]\+\).*/\1/p')

		compare_versions $current_binary $latest_binary
		if [[ $? -eq 0 ]]; then
			echo -e "Latest Cloudflared version is already installed."
			exit 1
		else
			echo -e "Newest Cloudflared version ${latest_binary} is available."
		fi
	fi

	# Get device architecture
	if [[ "$(uname -m)" == "aarch64" ]]; then
		archie="linux-arm64"
	elif [[ "$(uname -m)" == "x86_64" ]]; then
		archie="linux-amd64"
	elif [[ "$(uname -m)" == *"i386"* ]]; then
		archie="linux-386"
	elif [[ "$(uname -m)" == *"armhf"* ]]; then
		archie="linux-armhf"
	elif [[ "$(uname -m)" == *"arm"* ]]; then
		archie="linux-arm"
	else
		archie="unsupported"
		echo -e "Your device is unsupported!. Exiting..."
		exit 1
	fi

	# Install Cloudflared
	echo -e "Architecture detected: ${archie}"
	wget -qO ${path_binary} --show-progress "https://github.com/${github_reponame}/releases/download/${latest_binary}/cloudflared-${archie}"
	chmod +x ${path_binary}

	# Check init.d existing
	if [[ -e ${file_initd} ]]; then
		echo -e "Cloudflared ini.d is already installed."
		exit 1
	fi

	# Install init.d
	wget -qO ${file_initd} --show-progress "https://raw.githubusercontent.com/GegeDesembri/openwrt-tools/master/cloudflared/cloudflared"
	chmod +x ${file_initd}
}

# Update Cloudflared binary
function update_binary() {
	# Github get latest version
	latest_binary=$(curl -s "https://api.github.com/repos/${github_reponame}/releases/latest" | jq -r .tag_name)

	# compare version before updating
	if [[ -e $path_binary ]]; then
		current_binary=$($path_binary --version | sed -n 's/.*version \([0-9.]\+\).*/\1/p')

		compare_versions $current_binary $latest_binary
		if [[ $? -eq 0 ]]; then
			echo -e "Latest Cloudflared version is already installed."
			exit 1
		else
			echo -e "Newest Cloudflared version ${latest_binary} is available."
		fi
	fi

	# Get device architecture
	if [[ "$(uname -m)" == "aarch64" ]]; then
		archie="linux-arm64"
	elif [[ "$(uname -m)" == "x86_64" ]]; then
		archie="linux-amd64"
	elif [[ "$(uname -m)" == *"i386"* ]]; then
		archie="linux-386"
	elif [[ "$(uname -m)" == *"armhf"* ]]; then
		archie="linux-armhf"
	elif [[ "$(uname -m)" == *"arm"* ]]; then
		archie="linux-arm"
	else
		archie="unsupported"
		echo -e "Your device is unsupported!. Exiting..."
		exit 1
	fi

	# Install Cloudflared
	echo -e "Updating binary..."
	echo -e "Architecture detected: ${archie}"
	wget -qO ${path_binary}-update --show-progress "https://github.com/${github_reponame}/releases/download/${latest_binary}/cloudflared-${archie}"
	chmod +x ${path_binary}-update
	rm -f ${path_binary}
	mv ${path_binary}-update ${path_binary}
}

# Token changer
function token_update() {
	if [[ -e ${file_initd} ]]; then
		# Edit data
		echo -e "Editing data..."
		echo -e "ðŸ’¬ Enter New Cloudflared Token: (leave empty if no change)"
		read -e -p "==>> " new_token
		if [[ $(echo -e "${new_token}" | awk '{print length}') -gt 30 ]]; then
			echo -e "${new_token}" >/tmp/temp_cf.token
			mod_token=$(tr '\n' ' ' </tmp/temp_cf.token | sed "s/.*--token //" | sed "s/.*install //")
			sed -i "s|^cfd_token=.*$|cfd_token=${mod_token}|g" ${file_initd}
			rm /tmp/temp_cf.token
			# Success notif
			echo -e "âœ” Cloudflared data updated successfully."
		else
			# No change notif
			echo -e "âœ” Cloudflared data is not updated."
		fi
	else
		echo -e "File ${file_initd} not available."
	fi
}

# Enable/disable Cloudflared autostart
function init_toggler() {
	if [[ $(grep "cfd_token=" ${file_initd} | awk '{print length}') -gt 30 ]] && [[ $1 == "start" ]]; then
		# Disable Cloudflared
		${file_initd} disable
		${file_initd} stop
		# Enable Cloudflared
		${file_initd} enable
		${file_initd} start
		echo -e "âœ” Cloudflared Autostart activated."
	elif [[ $(grep "cfd_token=" ${file_initd} | awk '{print length}') -gt 30 ]] && [[ $1 == "stop" ]]; then
		# Disable Cloudflared
		${file_initd} disable
		${file_initd} stop
		echo -e "âœ” Cloudflared Autostart disabled."
	else
		# unknown command
		echo -e "Unknown command."
	fi
}

# Uninstall Cloudflared
function uninstall_cloudflared() {
	${file_initd} disable
	${file_initd} stop
	[ -f ${file_initd} ] && rm -f ${file_initd}
	[ -f ${path_binary} ] && rm -f ${path_binary}
	echo -e "âœ” Cloudflared uninstalled successfully!."
}

# Install commands
if [[ $1 == "i" ]]; then
	# Installation Prerequisite
	check_prerequisite
	install_prerequisite bash
	install_prerequisite screen
	install_prerequisite jq
	if [[ $(opkg list | grep -c "wget-ssl -") -gt "1" ]]; then
		install_prerequisite wget-ssl
	else
		install_prerequisite wget
	fi
	install_prerequisite curl
	check_prerequisite

	# Install binaries
	install_binary

	# Change token
	token_update

	# Enable Cloudflared autostart
	init_toggler start
elif [[ $1 == "e" ]]; then
	token_update
	init_toggler start
elif [[ $1 == "s" ]]; then
	# Enable/disable auto start
	init_toggler start
elif [[ $1 == "u" ]]; then
	# Disable runs
	init_toggler stop
	# Install binaries
	update_binary
	# Enable runs
	init_toggler start
elif [[ $1 == "l" ]]; then
	# Read logs
	ps | grep cloudflared
	logread | grep cloudflared
elif [[ $1 == "r" ]]; then
	# Uninstall full
	uninstall_cloudflared
else
	# Optional commands
	echo -e "Cloudflared Script Usage:"
	echo -e "${script_name} i : Install Cloudflared"
	echo -e "${script_name} e : Edit Cloudflared token"
	echo -e "${script_name} s : Activate/Disable autostart"
	echo -e "${script_name} u : Update Cloudflared binary"
	echo -e "${script_name} l : Read Cloudflared logs"
	echo -e "${script_name} r : Uninstall Cloudflared"
fi
